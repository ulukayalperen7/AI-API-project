import { GoogleGenerativeAI } from "@google/generative-ai";
import { AIProvider } from "./ai.manager";

/**
 * self contained Gemini service class
 * implemets AIProvider interface.
 * generateContent method returns a promise to follow all rules
 */
class GeminiService implements AIProvider {

    // to choose AI model  
    private readonly model: any;

    constructor() {
        console.log("Initializing Gemini service...");

        // getting the API key from env
        const apiKey = process.env.GEMINI_API_KEY;

        // check if the apiKey exists
        if (!apiKey) {
            throw new Error("GEMINI_API_KEY is not defined in the environment variables.");
        }

        // creating an instance of the GoogleGenerativeAI class, we give it the apiKey, connection object
        // The "apiKey" variable is now guaranteed to be a string.
        const googleAI = new GoogleGenerativeAI(apiKey);

        // We set up the specific model this service will use
        this.model = googleAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
        console.log("Gemini Service initialized successfully.");
    }
    /**
     * generates content using Gemini AI
     * last step to interact with the AI
     * @param promt the final, clean, complete prompt to be send to the AI
     * @returns text response generated by AI
     */
    async generateContent(promt: string): Promise<string> {

        /*
          It takes a text prompt, sends it to the Gemini API using model.generateContent(prompt),
          waits for the result, and returns the generated text. */
        try {
            console.log("GEMINI SERVICE: Sending prompt via class method...");
            // The 'await' keyword pauses execution until the 'generateContent' promise settles.
            //                this generateContent method is from googleAI object, not our method 
            const result = await this.model.generateContent(promt);
            // we get the response from the result that is created in generateContent method
            const response = await result.response;

            // The 'text()' method also returns a promise, so it must be awaited.
            const text = await response.text();

            console.log('GEMINI SERVICE: received valid response.')
            return text;

        } catch (error) {
            console.log('Error in Gemini Service: ', error);
            // Create a new, more informative error message.
            const newError = new Error('Failed to generate content from the external AI provider (Gemini).');

            // We check if the original error from Google has a status code we can use.
            // If Google sends a specific error code (like 503), we pass it along.
            // Otherwise, we default to 502 Bad Gateway: the server received an invalid response from an upstream server (Google)
            (newError as any).statusCode = (error as any)?.status || 502;
            throw newError;
        }
    }
}

// We create ONE single, shared instance of our GeminiService...
// ...and export it as the default export.
// Anyone who imports this file will get this specific object.
export default new GeminiService();