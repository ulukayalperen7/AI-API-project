import { GoogleGenerativeAI } from "@google/generative-ai";

// getting the API key from env 
const apiKey = process.env.GEMINI_API_KEY;

// creating an instance of the GoogleGenerativeAI class, we give it the apiKey, connection object
const generatedAI = new GoogleGenerativeAI(apiKey);

// we can choose the specific model we want to use 
const model = generatedAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

console.log("Gemini service initialized successfully.");

/**
 * generates content using Gemini AI
 * last step to interact with the AI
 * 
 * @param {string} prompt the final, clean, complete prompt to send to the AI
 * @returns {Promise<string>} text response generated by AI
 */
export const generateGeminiContent = async (prompt) => {

    /* 
    It takes a text prompt, sends it to the Gemini API using model.generateContent(prompt), 
    waits for the result, and returns the generated text. */
    try {
        console.log("GEMINI SERVICE: sending promts...");

        // we use the specific model that we declared above to generate content based on the prompt
        const result = await model.generateContent(prompt);
        const response = result.response;

        // get the text from response object
        const text = response.text();

        return text;
    } catch (error) {
        console.log('Error in Gemini Service: ', error);
        throw new Error('Failed to generate content from Gemini API.');
    }
};
