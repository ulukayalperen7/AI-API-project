import { GoogleGenerativeAI } from "@google/generative-ai";
// getting the API key from env
const apiKey = process.env.GEMINI_API_KEY;
// This checks if the GEMINI_API_KEY was found in the environment variables.
// If it's missing, it throws an error to stop the application from starting in a broken state.
if (!apiKey) {
    throw new Error("GEMINI_API_KEY is not defined in the environment variables.");
}
// creating an instance of the GoogleGenerativeAI class, we give it the apiKey, connection object
// The 'apiKey' variable is now guaranteed to be a string.
const generatedAI = new GoogleGenerativeAI(apiKey);
// we can choose the specific model we want to use
const model = generatedAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
console.log("Gemini service initialized successfully.");
/**
 * generates content using Gemini AI
 * last step to interact with the AI
 *
 * @param {string} prompt the final, clean, complete prompt to send to the AI
 * @returns {Promise<string>} text response generated by AI
 */
// This function is defined as asynchronous.
// The 'prompt' parameter is typed as a 'string'.
// The function is declared to return a 'Promise<string>', ensuring the caller expects an asynchronous string result.
export const generateGeminiContent = async (prompt) => {
    /*
    It takes a text prompt, sends it to the Gemini API using model.generateContent(prompt),
    waits for the result, and returns the generated text. */
    try {
        console.log("GEMINI SERVICE: sending promts...");
        // we use the specific model that we declared above to generate content based on the prompt
        // The 'await' keyword pauses execution until the 'generateContent' promise settles.
        const result = await model.generateContent(prompt);
        const response = await result.response;
        // The 'text()' method also returns a promise, so it must be awaited.
        const text = await response.text();
        console.log('GEMINI SERVICE: Received valid response.');
        return text;
    }
    catch (error) {
        // This block catches any errors from the API call.
        console.log('Error in Gemini Service: ', error);
        // This throws a new, more specific error to be handled by the calling service (template.service).
        throw new Error('Failed to generate content from Gemini API.');
    }
};
//# sourceMappingURL=gemini.service.js.map